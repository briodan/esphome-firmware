---
substitutions:
  name: esp32-s3-box
  friendly_name: ESP32 S3 Box
  loading_illustration_file: https://github.com/esphome/firmware/raw/main/voice-assistant/casita/loading_320_240.png
  idle_illustration_file: https://github.com/esphome/firmware/raw/main/voice-assistant/casita/idle_320_240.png
  listening_illustration_file: https://github.com/esphome/firmware/raw/main/voice-assistant/casita/listening_320_240.png
  thinking_illustration_file: https://github.com/esphome/firmware/raw/main/voice-assistant/casita/thinking_320_240.png
  replying_illustration_file: https://github.com/esphome/firmware/raw/main/voice-assistant/casita/replying_320_240.png
  error_illustration_file: https://github.com/esphome/firmware/raw/main/voice-assistant/casita/error_320_240.png

  loading_illustration_background_color: "000000"
  idle_illustration_background_color: "000000"
  listening_illustration_background_color: "FFFFFF"
  thinking_illustration_background_color: "FFFFFF"
  replying_illustration_background_color: "FFFFFF"
  error_illustration_background_color: "000000"

  voice_assist_idle_phase_id: "1"
  voice_assist_listening_phase_id: "2"
  voice_assist_thinking_phase_id: "3"
  voice_assist_replying_phase_id: "4"
  voice_assist_not_ready_phase_id: "10"
  voice_assist_error_phase_id: "11"
  voice_assist_muted_phase_id: "12"

  micro_wake_word_model: okay_nabu

  starting_up: "Starting up..."
  wake_word_prompt: "Say \\\"Okay Nabu\\\""
  listening_prompt: "How can I help?"
  error_prompt: "Sorry, error."
  
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio
  project:
    name: esphome.voice-assistant
    version: "2.0"
  min_version: 2023.11.5
  on_boot:
    priority: 600
    then:
      - script.execute: draw_display
      - delay: 30s
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: draw_display

esp32:
  board: esp32s3box
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      # CONFIG_AUDIO_BOARD_CUSTOM: "y"
      # CONFIG_ESP32_S3_BOX_3_BOARD: "y"
    # components:
      # - name: esp32_s3_box_3_board
        # source: github://jesserockz/esp32-s3-box-3-board@main
        # refresh: 0s

psram:
  mode: octal
  speed: 80MHz

external_components:
  - source: github://pr#5230
    components: esp_adf
    refresh: 0s

api:
  on_client_connected:
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: draw_display

ota:
logger:
  hardware_uart: USB_SERIAL_JTAG

dashboard_import:
  package_import_url: github://esphome/firmware/wake-word-voice-assistant/esp32-s3-box.yaml@main

wifi:
  ap:
  on_connect:
    - script.execute: draw_display
    - delay: 5s  # Gives time for improv results to be transmitted
    - ble.disable:
  on_disconnect:
    - script.execute: draw_display
    - ble.enable:

improv_serial:

esp32_improv:
  authorizer: none

button:
  - platform: factory_reset
    id: factory_reset_btn
    name: Factory reset

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO1
      inverted: true
    name: "Mute"
    disabled_by_default: true
    entity_category: diagnostic

  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    name: Top Left Button
    disabled_by_default: true
    entity_category: diagnostic
    on_multi_click:
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn

output:
  - platform: ledc
    pin: GPIO45
    id: backlight_output

light:
  - platform: monochromatic
    id: led
    name: LCD Backlight
    entity_category: config
    output: backlight_output
    restore_mode: RESTORE_DEFAULT_ON
    default_transition_length: 250ms

esp_adf:

microphone:
  - platform: esp_adf
    id: box_mic

speaker:
  - platform: esp_adf
    id: box_speaker

micro_wake_word:
  model: ${micro_wake_word_model}
  on_wake_word_detected:
    - if:
        condition:
          switch.is_off: continued_conversation
        then:
          - logger.log: "(on_wake_word_detected) starting VA single"
          - lambda: id(va).set_use_wake_word(false);
          - voice_assistant.start:
          #     wake_word: !lambda return wake_word;
        else:
          - logger.log: "(on_wake_word_detected) starting VA continuous"
          - lambda: id(va).set_use_wake_word(false);
          - voice_assistant.start_continuous:
          #     wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: box_mic
  speaker: box_speaker
  use_wake_word: true
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  vad_threshold: 3
  on_listening:
    - logger.log: "(on_listening) started"
    - logger.log: "(on_listening) Switching to LISTENING phase"
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    - script.execute: draw_display
    - if:
        condition:
          - switch.is_on: continued_conversation
        then:
          - script.execute: stt_timeout_to_idle
          - lambda: id(va).set_use_wake_word(false);
  on_stt_vad_end:
    - logger.log: "(on_stt_vad_end) started"
  on_stt_end:
    - logger.log:
        format: "(on_stt_end) User: %s"
        args: ['x.c_str()']
        level: INFO
    - lambda: id(assist_query).publish_state( x.c_str() );
    - logger.log: "(on_stt_end) Switching to THINKING phase"
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: draw_display
    - if:
        condition:
          - switch.is_on: continued_conversation
        then:
          - script.execute: stt_timeout_to_idle
    - lambda: id(assist_query).publish_state( x.c_str() );
  on_tts_start:
    - logger.log:
        format: "(on_tts_start) Jarvis: %s"
        args: ['x.c_str()']
        level: INFO
    - lambda: id(assist_reply).publish_state( x.c_str() );
    - if:
        condition:
          and:
            # When using extended openai conversation, add the following to the prompt
            # If you feel the user has finished and doesn't want to talk anymore, just respond with the exact phrase "Ok, bye."
            - lambda: return (x == "Ok, bye.");
            - switch.is_on: continued_conversation
        then:
          - logger.log: "(on_tts_start) I'm no longer wanted, so returning to idle by script"
          - script.execute: return_to_idle
  on_tts_stream_start:
    - logger.log: "(on_tts_stream_start) started"
    - logger.log: "(on_tts_stream_start) Switching to REPLYING phase"
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: draw_display
    - if:
        condition:
          - switch.is_on: continued_conversation
        then:
          - script.execute: stt_timeout_to_idle
  on_tts_stream_end:
    - logger.log: "(on_tts_stream_end) started"
    - if:
        condition:
          - switch.is_on: continued_conversation
        then:
          - logger.log: "(on_tts_stream_end) Switching back to LISTENING phase"
          - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
          - script.execute: stt_timeout_to_idle
        else:
          - logger.log: "(on_tts_stream_end) Switching to IDLE phase"
          - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
    - script.execute: draw_display
  on_end:
    - logger.log:
        format: "(on-end) started with phase: %i"
        args: ['id(voice_assistant_phase)']
    - if:
        condition:
          and:
            - switch.is_off: mute
            - lambda: return id(wake_word_engine_location).state == "On device";
            - switch.is_off: continued_conversation
        then:
          - logger.log: "(on_client_connected) Returning to idle by script"
          - script.execute: return_to_idle
    - logger.log: "(on-end) exiting"
                                  
  on_error:
    - logger.log: "(on_error) started"
    - if:
        condition:
          and:
            - lambda: return !id(init_in_progress);
            - lambda: return !(code == "stt-no-text-recognized");
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - logger.log: "(on_error) Switched to ERROR phase"
          - script.execute: draw_display
          - delay: 1s
          - logger.log: "(on_error) Stopping stt_timeout_to_idle"
          - script.stop: stt_timeout_to_idle
          - if:
              condition:
                switch.is_off: mute
              then:
                - logger.log: "(on_client_connected) Returning to idle by script"
                - script.execute: return_to_idle
              else:
                - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
          - script.execute: draw_display
    - logger.log: "(on_error) exiting"
  on_client_connected:
    - logger.log: "(on_client_connected) started"
    - if:
        condition:
          switch.is_off: mute
        then:
          - wait_until:
              not: ble.enabled
          - logger.log: "(on_client_connected) Returning to idle by script"
          - script.execute: return_to_idle
                                                                                          
                   
                                                         
                                                   
               
                        
                                                                                  
                   
                                       
                                                                              
        else:
          - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
    - lambda: id(init_in_progress) = false;
    - script.execute: draw_display
  on_client_disconnected:
    - if:
        condition:
          lambda: return id(wake_word_engine_location).state == "In Home Assistant";
        then:
          - lambda: id(va).set_use_wake_word(false);
          - voice_assistant.stop:
    - if:
        condition:
          lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - micro_wake_word.stop
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: draw_display

script:
  - id: stt_timeout_to_idle
    mode: restart     # restart the timer if called before timeout
    then:
      if:
        condition:
          switch.is_on: continued_conversation
        then:
          - logger.log:
              format: "(stt_timeout_to_idle) resetting to %.0f seconds"
              args: [id(continued_timeout).state]
          - delay: !lambda "return id(continued_timeout).state * 1000;"
          - if:
              condition:
                lambda: return (id(voice_assistant_phase) == ${voice_assist_replying_phase_id});
              then:
                - wait_until:
                    lambda: return !(id(voice_assistant_phase) == ${voice_assist_replying_phase_id});
                - delay: 1s  # Give time for the stream to end and the phase to be switched back to listening and this timeout to be reset
          - logger.log: "(stt_timeout_to_idle) Returning to idle by script"
          - script.execute: return_to_idle

  - id: return_to_idle
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - logger.log: "(return_to_idle) Stopping stt_timeout_to_idle"
            - script.stop: stt_timeout_to_idle
            - if:
                condition:
                  voice_assistant.is_running
                then:
                  - logger.log: "(return_to_idle) Stopping voice_assistant"
                  - lambda: id(va).set_use_wake_word(false);
                  - voice_assistant.stop
                  - logger.log: "(return_to_idle) Waiting for voice_assistant to stop"
                  - wait_until:
                      condition:
                        not:
                          voice_assistant.is_running
                      timeout: 5s
            - if:
                condition:
                  not:
                    micro_wake_word.is_running
                then:
                  - logger.log: "(return_to_idle) Starting micro_wake_word"
                  - micro_wake_word.start:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - if:
                condition:
                  micro_wake_word.is_running
                then:
                  micro_wake_word.stop:
            - wait_until:
                condition:
                  not:
                    voice_assistant.is_running
                timeout: 5s
            - logger.log: "(return_to_idle) Starting voice_assistant continuous with use_wake_word"
            - lambda: id(va).set_use_wake_word(true);
            - if:
                condition:
                  - not:
                      voice_assistant.is_running
                then:
                  - voice_assistant.start_continuous:
      - logger.log: "(return_to_idle) Switching to IDLE phase"
      - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
      - script.execute: draw_display

  - id: draw_display
    then:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        api.connected:
                      then:
                        - lambda: |
                            switch(id(voice_assistant_phase)) {
                              case ${voice_assist_listening_phase_id}:
                                id(s3_box_lcd).show_page(listening_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_thinking_phase_id}:
                                id(s3_box_lcd).show_page(thinking_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_replying_phase_id}:
                                id(s3_box_lcd).show_page(replying_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_error_phase_id}:
                                id(s3_box_lcd).show_page(error_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_muted_phase_id}:
                                id(s3_box_lcd).show_page(muted_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_not_ready_phase_id}:
                                id(s3_box_lcd).show_page(no_ha_page);
                                id(s3_box_lcd).update();
                                break;
                              default:
                                id(s3_box_lcd).show_page(idle_page);
                                id(s3_box_lcd).update();
                            }
                      else:
                        - display.page.show: no_ha_page
                        - component.update: s3_box_lcd
                else:
                  - display.page.show: no_wifi_page
                  - component.update: s3_box_lcd
          else:
            - display.page.show: initializing_page
            - component.update: s3_box_lcd

switch:
  - platform: template
    name: Mute
    id: mute
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - logger.log: "(switch.mute:OFF) Returning to idle by script"
                 
                          
                      
                                                
                     
                       
                                
                                                                                                  
                           
                                                                 
                                                          
                       
                                
                                                                                          
                           
                                               
            - script.execute: return_to_idle
    on_turn_on:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - lambda: id(va).set_use_wake_word(false);
            - if:
                condition:
                  - voice_assistant.is_running
                then:
                  - logger.log: "(switch.mute:ON) Stopping voice_assistant"
                  - voice_assistant.stop
            - if:
                condition:
                  - micro_wake_word.is_running
                then:
                  - logger.log: "(switch.mute:ON) Stopping micro_wake_word"
                  - micro_wake_word.stop
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
            - script.execute: draw_display
  - platform: template
    name: Continued conversation
    id: continued_conversation
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - logger.log: "(continued_conversation.turn_OFF) Returning to idle by script"
      - script.execute: return_to_idle
    on_turn_on:
      - logger.log: "(continued_conversation.turn_ON) Returning to idle by script"
      - script.execute: return_to_idle
  - platform: template
    name: Display text
    id: display_text
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - script.execute: draw_display
    on_turn_on:
      - script.execute: draw_display

number:
  - platform: template
    entity_category: config
    name: Continued timeout
    id: continued_timeout
    icon: mdi:clock
    optimistic: true
    restore_value: true
    initial_value: 8
    min_value: 1
    step: 1
    max_value: 10
    unit_of_measurement: s
    mode: slider

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - wait_until:
          lambda: return id(voice_assistant_phase) == ${voice_assist_muted_phase_id} || id(voice_assistant_phase) == ${voice_assist_idle_phase_id};
      - logger.log: "(select.wake_word_engine_location) Returning to idle by script"
      - script.execute: return_to_idle
                                                    
               
                                  
                          
                 
                          
                                     
                     
                                                           
                                                     
           
                    
                                            
               
                                                      
                                  
                          
                                   

  - platform: template
    entity_category: config
    name: Display clock date
    id: display_date
    optimistic: true
    restore_value: true
    options:
      - None
      - Short (US)
      - Short (UK)
      - Short (EU)
      - Long
      - Long with weekday
      - Weekday only
    initial_option: None
    on_value:
      - lambda: |-
          switch (i) {
            case 0:
              id(date_format_string) = "";
              break;
            case 1:
              id(date_format_string) = "%m/%d/%y";
              break;
            case 2:
              id(date_format_string) = "%d/%m/%y";
              break;
            case 3:
              id(date_format_string) = "%d.%m.%y";
              break;
            case 4:
              id(date_format_string) = "%d %b, %Y";
              break;
            case 5:
              id(date_format_string) = "%a, %d %b, %Y";
              break;
            case 6:
              id(date_format_string) = "%A";
              break;
          }
      - logger.log:
          format: "(display_date) date_format_string set to: %s"
          args: [id(date_format_string).c_str()]
      - script.execute: draw_display

  - platform: template
    entity_category: config
    name: Display clock time
    id: display_time
    optimistic: true
    restore_value: true
    options:
      - None
      - 12 hour
      - 24 hour
    initial_option: None
    on_value:
      - lambda: |-
          switch (i) {
            case 0:
              id(time_format_string) = "";
              break;
            case 1:
              id(time_format_string) = "%I:%M %p";
              break;
            case 2:
              id(time_format_string) = "%H:%M";
              break;
          }
      - logger.log:
          format: "(display_time) time_format_string set to: %s"
          args: [id(time_format_string).c_str()]
      - script.execute: draw_display

text_sensor:
  - platform: template
    name: Assist query
    id: assist_query
  - platform: template
    name: Assist reply
    id: assist_reply

globals:
  - id: init_in_progress
    type: bool
    restore_value: false
    initial_value: "true"
  - id: voice_assistant_phase
    type: int
    restore_value: false
    initial_value: ${voice_assist_not_ready_phase_id}
  - id: date_format_string
    type: std::string
    restore_value: true
    initial_value: ""
  - id: time_format_string
    type: std::string
    restore_value: true
    initial_value: ""

image:
  - file: ${error_illustration_file}
    id: casita_error
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${idle_illustration_file}
    id: casita_idle
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${listening_illustration_file}
    id: casita_listening
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${thinking_illustration_file}
    id: casita_thinking
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${replying_illustration_file}
    id: casita_replying
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${loading_illustration_file}
    id: casita_initializing
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: https://github.com/esphome/firmware/raw/main/voice-assistant/error_box_illustrations/error-no-wifi.png
    id: error_no_wifi
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: https://github.com/esphome/firmware/raw/main/voice-assistant/error_box_illustrations/error-no-ha.png
    id: error_no_ha
    resize: 320x240
    type: RGB24
    use_transparency: true

font:
  - file:
      type: gfonts
      family: Roboto
      weight: 300
    id: font_roboto_16
    size: 16
    glyphs:
      '&@!"''%()+=,-_.:°/$€£¥?0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyzÀàÁáÂâÃãÄäĀāĂăÅåǺǻẠạĄąÆæǼǽĆćĈĉČčĊċÇçĎďĐđÐðÈèÉéÊêẼẽĚěËëĒēĔĕĖėẸẹĘęĜĝǦǧĞğĠġĢģĤĥĦħıÌìÍíÎîĨĩÏïĪīĬĭİỊịĮįȷĴĵĶķĸĹĺĽľĻļŁłĿŀŃńÑñŇňŅņƝɲŊŋŉÒòÓóÔôÕõÖöŌōŎŏŐőỌọǪǫØøǾǿŒœŔŕŘřŖŗŚśŜŝŠšŞşȘșẞßŤťŢţȚțŦŧÞþÙùÚúÛûŨũÜüŪūŬŭŮůŰűỤụŲųẀẁẂẃŴŵẄẅỲỳÝýŶŷỸỹŸÿȲȳŹźŽžŻżĲĳƏə'

color:
  - id: idle_color
    hex: ${idle_illustration_background_color}
  - id: listening_color
    hex: ${listening_illustration_background_color}
  - id: thinking_color
    hex: ${thinking_illustration_background_color}
  - id: replying_color
    hex: ${replying_illustration_background_color}
  - id: loading_color
    hex: ${loading_illustration_background_color}
  - id: error_color
    hex: ${error_illustration_background_color}

spi:
  clk_pin: 7
  mosi_pin: 6

time:
  - platform: sntp
    id: the_time
    on_time:
      - cron: 0 * * * * *
        then:
          - if:
              condition:
                - lambda: return ( std::string(id(time_format_string).c_str()) != "" );
              then:
                - logger.log: "(on_time) Updating time display"
                - script.execute: draw_display
      - cron: 1 0 0 * * *
        then:
          - if:
              condition:
                - lambda: return ( std::string(id(date_format_string).c_str()) != "" );
              then:
                - logger.log: "(on_time) Updating date display"
                - script.execute: draw_display

display:
  - platform: ili9xxx
    id: s3_box_lcd
    model: S3BOX
    data_rate: 40MHz
    cs_pin: 5
    dc_pin: 4
    reset_pin:
      number: 48
      #inverted: true
    update_interval: never
    pages:
      - id: idle_page
        lambda: |-
          it.fill(id(idle_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_idle), ImageAlign::CENTER);
          if ( id(display_text).state ) {
            it.print( 10, 10, id(font_roboto_16), Color::WHITE, "${wake_word_prompt}" );
          }

          if ( std::string(id(date_format_string).c_str()) != "" or std::string(id(time_format_string).c_str()) != "" ) {
            // Get the format strings
            std::string date_format = id(date_format_string).c_str();
            std::string time_format = id(time_format_string).c_str();
            // Construct the format string
            std::string format_string;
            if (!date_format.empty() && !time_format.empty()) {
                format_string = date_format + " - " + time_format;
            } else if (!date_format.empty()) {
                format_string = date_format;
            } else {
                format_string = time_format;
            }
            // Get the current date and time text
            auto date_time_text = id(the_time).now().strftime(format_string.c_str());
            if (id(display_time).state == "12 hour") {
              // Remove leading zeros from day and hour
              size_t pos = date_time_text.find(" 0");
              while (pos != std::string::npos) {
                date_time_text.erase(pos + 1, 1); // Remove the leading zero
                pos = date_time_text.find(" 0", pos); // Find the next occurrence
              }
            }
            it.printf( it.get_width() / 2, it.get_height() - 10, id(font_roboto_16), Color::WHITE, TextAlign::BOTTOM_CENTER, "%s", date_time_text.c_str() );
          }
      - id: listening_page
        lambda: |-
          it.fill(id(listening_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_listening), ImageAlign::CENTER);
          if ( id(display_text).state ) {
            it.print( 10, 10, id(font_roboto_16), Color::BLACK, "${listening_prompt}" );
          }
      - id: thinking_page
        lambda: |-
          it.fill(id(thinking_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_thinking), ImageAlign::CENTER);
          if ( id(display_text).state ) {
            it.print( 10, 10, id(font_roboto_16), Color::BLACK, id(assist_query).state.c_str() );
          }
      - id: replying_page
        lambda: |-
          it.fill(id(replying_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_replying), ImageAlign::CENTER);
          if ( id(display_text).state ) {
            it.print( 10, 10, id(font_roboto_16), Color::BLACK, id(assist_reply).state.c_str() );
          }
      - id: error_page
        lambda: |-
          it.fill(id(error_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_error), ImageAlign::CENTER);
          if ( id(display_text).state ) {
            it.print( 10, 10, id(font_roboto_16), Color::WHITE, "${error_prompt}" );
          }
      - id: no_ha_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_ha), ImageAlign::CENTER);
      - id: no_wifi_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_wifi), ImageAlign::CENTER);
      - id: initializing_page
        lambda: |-
          it.fill(id(loading_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_initializing), ImageAlign::CENTER);
          if ( id(display_text).state ) {
            it.print( 10, 10, id(font_roboto_16), Color::WHITE, "${starting_up}" );
          }
      - id: muted_page
        lambda: |-
          it.fill(Color::BLACK);
